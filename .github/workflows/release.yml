name: Release Artifacts

on:
  release:
    types:
      - "released"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: "Set up JDK 11"
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"

      - name: "Cache m2 repo"
        id: cache-m2
        uses: actions/cache@v2.1.5
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ~/.m2
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml' )}}

      - name: "Build with Maven"
        id: build-with-maven
        run: |
          ./mvnw -B -DskipTests install --file pom.xml
          pom_version=$(./mvnw org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -q \
                        -Dexpression=project.version -DforceStdout)
          echo "POM Version $pom_version"
          artifact_id=$(./mvnw org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -q \
                        -Dexpression=project.build.finalName -DforceStdout)
          artifact="$artifact_id-runner.jar"
          echo "Project Artifact $artifact"
          echo "::set-output name=jar-asset::$artifact"

      - name: "Attach Artifacts to Release"
        uses: actions/github-script@v4.0.1
        env:
          TAG_NAME: ${{ github.event.tag_name }}
          ASSET_FILE: "target/${{ steps.build-with-maven.outputs.jar-asset }}"
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const {TAG_NAME} = process.env
            const {ASSET_FILE} = process.env

            console.log("Context ->  %s",JSON.stringify(context))

             const { data } = await octokit.request('GET /repos/${context.repo.owner}/${context.repo.repo}/releases/tags/{tag}', {
               tag: TAG_NAME
             }).catch(err => {
               console.error("Error getting release %s", JSON.stringify(err.errors))
             })

             const upload_url = data.upload_url

             const contentLength = fs.statSync(ASSET_FILE).size;
             console.log("%s Content length=%s", ASSET_FILE, contentLength)

             const uploadAsset = await github.rest.repos.uploadReleaseAsset({
             url: upload_url,
             name: '${{ steps.build-with-maven.outputs.jar-asset }}',
             headers: {
               "content-type": "application/zip",
               "content-length": contentLength,
             },
             data: fs.readFileSync(ASSET_FILE)
             }).catch(err => {
               console.log("Error uploading asset %s", err)
             })

             console.log("Asset upload --> %s ",uploadAsset)
